generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client-sqlite"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  password      String
  isAdmin       Boolean         @default(false) @map("is_admin")
  lastActive    DateTime        @default(now()) @map("last_active")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  orders        Order[]
  promoCodeUses UserPromoCode[]

  @@index([lastActive])
  @@map("users")
}

model Order {
  id           String      @id @default(uuid())
  userId       String
  total        Float
  status       String      @default("pending")
  customerName String
  email        String
  phone        String?
  address      String?
  notes        String?
  promoCodeId  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  promoCode    PromoCode?  @relation(fields: [promoCodeId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
  items        OrderItem[]

  @@index([userId])
  @@index([promoCodeId])
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  productName String
  price       Float
  quantity    Int
  image       String?
  createdAt   DateTime @default(now())
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
}

model PromoCode {
  id             String          @id @default(uuid())
  code           String          @unique
  description    String?
  discount       Float
  minOrderAmount Float?
  isActive       Boolean         @default(true)
  validFrom      DateTime        @default(now())
  validUntil     DateTime?
  maxUses        Int?
  usedCount      Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  orders         Order[]
  users          UserPromoCode[]

  @@index([code])
  @@map("promo_codes")
}

model UserPromoCode {
  id          String    @id @default(cuid())
  userId      String
  promoCodeId String
  usedAt      DateTime  @default(now())
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, promoCodeId])
  @@index([promoCodeId], map: "user_promo_codes_promoCodeId_fkey")
  @@map("user_promo_codes")
}

model Product {
  id           String               @id @default(uuid())
  slug         String               @unique
  brand        String?
  price        Float?
  stock        Int                  @default(0)
  currency     String?
  images       String
  specs        Json?
  isActive     Boolean              @default(true)
  categoryId   String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  orderItems   OrderItem[]
  category     Category?            @relation(fields: [categoryId], references: [id])
  certificates ProductCertificate[]
  i18n         ProductI18n[]

  @@index([slug])
  @@index([categoryId])
}

model ProductI18n {
  id          String  @id @default(cuid())
  productId   String
  locale      String
  title       String
  summary     String?
  description String?
  product     Product @relation(fields: [productId], references: [id])

  @@unique([productId, locale])
}

model Category {
  id       String    @id @default(cuid())
  slug     String    @unique
  name     String?
  products Product[]
}

model Certificate {
  id       String               @id @default(cuid())
  title    String
  href     String               @unique
  products ProductCertificate[]
}

model ProductCertificate {
  productId     String
  certificateId String
  certificate   Certificate @relation(fields: [certificateId], references: [id])
  product       Product     @relation(fields: [productId], references: [id])

  @@id([productId, certificateId])
  @@index([certificateId], map: "ProductCertificate_certificateId_fkey")
}
